name: Initialize Database Schema

on:
  push:
    branches: ["demo"]
  pull_request:
    branches: ["demo"]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to initialize'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      generate_demo_data:
        description: 'Generate demo data'
        required: false
        default: false
        type: boolean

jobs:
  init-database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary pandas

      - name: Wait for database to be ready
        run: |
          # Wait for main database
          until pg_isready -h "${{ secrets.MAIN_DB_HOST }}" -p "${{ secrets.MAIN_DB_PORT }}" -U "${{ secrets.MAIN_DB_USER }}"; do
            echo "Waiting for main database..."
            sleep 2
          done
          
          # Wait for holding database
          until pg_isready -h "${{ secrets.HOLDING_DB_HOST }}" -p "${{ secrets.HOLDING_DB_PORT }}" -U "${{ secrets.HOLDING_DB_USER }}"; do
            echo "Waiting for holding database..."
            sleep 2
          done

      - name: Initialize main database schema
        run: |
          PGPASSWORD=${{ secrets.MAIN_DB_PASS }} psql -h ${{ secrets.MAIN_DB_HOST }} -p ${{ secrets.MAIN_DB_PORT }} -U ${{ secrets.MAIN_DB_USER }} -d ${{ secrets.MAIN_DB_NAME }} -f database/sql/schema.sql

      - name: Initialize holding database schema
        run: |
          PGPASSWORD=${{ secrets.HOLDING_DB_PASS }} psql -h ${{ secrets.HOLDING_DB_HOST }} -p ${{ secrets.HOLDING_DB_PORT }} -U ${{ secrets.HOLDING_DB_USER }} -d ${{ secrets.HOLDING_DB_NAME }} -c "
          CREATE TABLE IF NOT EXISTS holding_ingest (
              id SERIAL PRIMARY KEY,
              data JSONB NOT NULL,
              received_at TIMESTAMP NOT NULL DEFAULT NOW(),
              processed BOOLEAN DEFAULT FALSE,
              created_at TIMESTAMP DEFAULT NOW()
          );
          "

      - name: Initialize dead letter queue schema
        run: |
          PGPASSWORD=${{ secrets.DLQ_DB_PASS }} psql -h ${{ secrets.DLQ_DB_HOST }} -p ${{ secrets.DLQ_DB_PORT }} -U ${{ secrets.DLQ_DB_USER }} -d ${{ secrets.DLQ_DB_NAME }} -c "
          CREATE TABLE IF NOT EXISTS dlq_records (
              id SERIAL PRIMARY KEY,
              original_data JSONB NOT NULL,
              validation_errors JSONB NOT NULL,
              created_at TIMESTAMP DEFAULT NOW(),
              retry_count INTEGER DEFAULT 0,
              last_retry_at TIMESTAMP
          );
          "

      - name: Generate demo data (if requested)
        if: ${{ github.event.inputs.generate_demo_data == 'true' }}
        run: |
          python scripts/generate_demo_data.py
          
          # Import demo data to main database
          PGPASSWORD=${{ secrets.MAIN_DB_PASS }} psql -h ${{ secrets.MAIN_DB_HOST }} -p ${{ secrets.MAIN_DB_PORT }} -U ${{ secrets.MAIN_DB_USER }} -d ${{ secrets.MAIN_DB_NAME }} -c "
          \\copy instore_sales FROM 'demo_data/instore_sales.csv' WITH CSV HEADER;
          \\copy online_sales FROM 'demo_data/online_sales.csv' WITH CSV HEADER;
          \\copy marketing_email FROM 'demo_data/marketing_email.csv' WITH CSV HEADER;
          \\copy marketing_tiktok FROM 'demo_data/marketing_tiktok.csv' WITH CSV HEADER;
          \\copy photo_production FROM 'demo_data/photo_production.csv' WITH CSV HEADER;
          "

      - name: Verify database initialization
        run: |
          echo "Verifying main database tables..."
          PGPASSWORD=${{ secrets.MAIN_DB_PASS }} psql -h ${{ secrets.MAIN_DB_HOST }} -p ${{ secrets.MAIN_DB_PORT }} -U ${{ secrets.MAIN_DB_USER }} -d ${{ secrets.MAIN_DB_NAME }} -c "\dt"
          
          echo "Verifying holding database tables..."
          PGPASSWORD=${{ secrets.HOLDING_DB_PASS }} psql -h ${{ secrets.HOLDING_DB_HOST }} -p ${{ secrets.HOLDING_DB_PORT }} -U ${{ secrets.HOLDING_DB_USER }} -d ${{ secrets.HOLDING_DB_NAME }} -c "\dt"
          
          echo "Verifying DLQ database tables..."
          PGPASSWORD=${{ secrets.DLQ_DB_PASS }} psql -h ${{ secrets.DLQ_DB_HOST }} -p ${{ secrets.DLQ_DB_PORT }} -U ${{ secrets.DLQ_DB_USER }} -d ${{ secrets.DLQ_DB_NAME }} -c "\dt"

      - name: Notify completion
        run: |
          echo "Database initialization completed successfully for ${{ github.event.inputs.environment }} environment"
