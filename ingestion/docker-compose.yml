services:
  api-receiver:
    build: ./src
    container_name: api_receiver
    restart: unless-stopped
    environment:
      PORT: 8080
      API_KEY: ${API_KEY}
      DB_HOST: holding_db
      DB_PORT: 5432
      DB_USER: ${HOLDING_DB_USER}
      DB_PASS: ${HOLDING_DB_PASS}
      DB_NAME: ${HOLDING_DB_NAME}
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      - holding_db
    networks:
      - local_net
      - database_db_net
    volumes:
      - ./src:/app/src
      - ./data:/app/data   
    entrypoint: ["/app/src/wait-for-db.sh"]

  sync-job:
    build: ./src
    container_name: sync_job
    restart: unless-stopped
    environment:
      # Holding DB connection
      DB_HOST: holding_db
      DB_PORT: 5432
      DB_USER: ${HOLDING_DB_USER}
      DB_PASS: ${HOLDING_DB_PASS}
      DB_NAME: ${HOLDING_DB_NAME}
      # Main DB connection
      MAIN_DB_HOST: postgres_main
      MAIN_DB_PORT: 5432
      MAIN_DB_USER: ${MAIN_DB_USER}
      MAIN_DB_PASS: ${MAIN_DB_PASS}
      MAIN_DB_NAME: ${MAIN_DB_NAME}
    ports:
      - "127.0.0.1:8081:8080"  # Metrics port
    depends_on:
      - holding_db
    networks:
      - database_db_net
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    command: ["python", "/app/src/sync_job.py"]

  holding_db:
    image: postgres:15
    container_name: holding_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${HOLDING_DB_USER}
      POSTGRES_PASSWORD: ${HOLDING_DB_PASS}
      POSTGRES_DB: ${HOLDING_DB_NAME}
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - database_db_net

networks:
  local_net:
    driver: bridge
  database_db_net:
    external: true
