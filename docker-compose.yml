# Master docker-compose file for the entire analytics infrastructure
# This orchestrates all services across the different stacks
services:
  # Database services
  postgres_main:
    image: postgres:15
    container_name: postgres_main
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${MAIN_DB_USER}
      POSTGRES_PASSWORD: ${MAIN_DB_PASS}
      POSTGRES_DB: ${MAIN_DB_NAME}
    volumes:
      - ./database/data:/var/lib/postgresql/data
      - ./database/backups:/backups
      - ./database/sql:/sql
      - ./demo_data:/csv
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - db_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MAIN_DB_USER} -d ${MAIN_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  holding_db:
    image: postgres:15
    container_name: holding_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${HOLDING_DB_USER}
      POSTGRES_PASSWORD: ${HOLDING_DB_PASS}
      POSTGRES_DB: ${HOLDING_DB_NAME}
    volumes:
      - ./ingestion/data:/var/lib/postgresql/data
    networks:
      - db_net

  # Ingestion services
  api-receiver:
    build: ./ingestion/src
    container_name: api_receiver
    restart: unless-stopped
    environment:
      PORT: 8080
      API_KEY: ${API_KEY}
      DB_HOST: holding_db
      DB_PORT: 5432
      DB_USER: ${HOLDING_DB_USER}
      DB_PASS: ${HOLDING_DB_PASS}
      DB_NAME: ${HOLDING_DB_NAME}
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      - holding_db
    networks:
      - db_net
    volumes:
      - ./ingestion/src:/app/src
      - ./ingestion/data:/app/data
    entrypoint: ["/app/src/wait-for-db.sh"]

  sync-job:
    build: ./ingestion/src
    container_name: sync_job
    restart: unless-stopped
    environment:
      DB_HOST: holding_db
      DB_PORT: 5432
      DB_USER: ${HOLDING_DB_USER}
      DB_PASS: ${HOLDING_DB_PASS}
      DB_NAME: ${HOLDING_DB_NAME}
      MAIN_DB_HOST: postgres_main
      MAIN_DB_PORT: 5432
      MAIN_DB_USER: ${MAIN_DB_USER}
      MAIN_DB_PASS: ${MAIN_DB_PASS}
      MAIN_DB_NAME: ${MAIN_DB_NAME}
    ports:
      - "127.0.0.1:8081:8080"
    depends_on:
      - holding_db
      - postgres_main
    networks:
      - db_net
    volumes:
      - ./ingestion/src:/app/src
      - ./ingestion/data:/app/data
    command: ["python", "/app/src/sync_job.py"]

  # Validation services
  data-validator:
    build: ./validation/src
    container_name: data-validator
    restart: unless-stopped
    environment:
      DB_HOST: holding_db
      DB_PORT: 5432
      DB_USER: ${HOLDING_DB_USER}
      DB_PASS: ${HOLDING_DB_PASS}
      DB_NAME: ${HOLDING_DB_NAME}
      DLQ_DB_USER: ${DLQ_DB_USER:-dlq_user}
      DLQ_DB_PASS: ${DLQ_DB_PASS:-dlq_password}
      DLQ_DB_NAME: ${DLQ_DB_NAME:-dead_letter_queue}
      VALIDATION_INTERVAL: 30
    ports:
      - "127.0.0.1:8082:8080"
    networks:
      - db_net
    volumes:
      - ./validation/src:/app/src
      - ./validation/schemas:/app/schemas
    depends_on:
      - holding_db
      - dead-letter-queue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  dead-letter-queue:
    image: postgres:15
    container_name: dead_letter_queue
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DLQ_DB_USER:-dlq_user}
      POSTGRES_PASSWORD: ${DLQ_DB_PASS:-dlq_password}
      POSTGRES_DB: ${DLQ_DB_NAME:-dead_letter_queue}
    volumes:
      - ./validation/dlq-data:/var/lib/postgresql/data
    networks:
      - db_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DLQ_DB_USER:-dlq_user} -d ${DLQ_DB_NAME:-dead_letter_queue}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Visualization services
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    restart: unless-stopped
    environment:
      MB_JETTY_PORT: 3000
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${METABASE_APP_DB_NAME:-metabase}
      MB_DB_PORT: 5432
      MB_DB_USER: ${MAIN_DB_USER}
      MB_DB_PASS: ${MAIN_DB_PASS}
      MB_DB_HOST: postgres_main
      # CSP Configuration to fix UI issues
      MB_CONTENT_SECURITY_POLICY_NONCE: 'true'
      MB_CSP_SCRIPT_SRC: "'self' 'unsafe-inline' 'unsafe-eval' https://maps.google.com https://accounts.google.com"
      MB_CSP_STYLE_SRC: "'self' 'unsafe-inline' https://accounts.google.com"
      MB_CSP_FONT_SRC: "'self' data:"
      MB_CSP_IMG_SRC: "'self' data: https:"
      MB_CSP_CONNECT_SRC: "'self'"
    ports:
      - "3000:3000"
    volumes:
      - ./visualization/metabase:/metabase-data
    networks:
      - db_net
    depends_on:
      - postgres_main
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring services
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - ./monitoring/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - db_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - db_net
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - db_net

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: postgres-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${MAIN_DB_USER}:${MAIN_DB_PASS}@postgres_main:5432/${MAIN_DB_NAME}?sslmode=disable"
    networks:
      - db_net
    depends_on:
      - postgres_main

  health-monitor:
    build: ./monitoring/health-monitor
    container_name: health-monitor
    restart: unless-stopped
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - API_RECEIVER_URL=http://api_receiver:8080
      - METABASE_URL=http://metabase:3000
      - HOLDING_DB_USER=${HOLDING_DB_USER}
      - HOLDING_DB_PASS=${HOLDING_DB_PASS}
      - HOLDING_DB_NAME=${HOLDING_DB_NAME}
      - MAIN_DB_USER=${MAIN_DB_USER}
      - MAIN_DB_PASS=${MAIN_DB_PASS}
      - MAIN_DB_NAME=${MAIN_DB_NAME}
    ports:
      - "127.0.0.1:8083:8080"
    networks:
      - db_net
    depends_on:
      - prometheus

  # Logging services
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    restart: unless-stopped
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./logging/loki-config.yml:/etc/loki/local-config.yaml
      - ./logging/data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - db_net
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./logging/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - db_net
    depends_on:
      - loki

  grafana-logs:
    image: grafana/grafana:10.0.0
    container_name: grafana-logs
    restart: unless-stopped
    ports:
      - "127.0.0.1:3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_LOGS_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./logging/grafana-logs/data:/var/lib/grafana
      - ./logging/grafana-logs/provisioning:/etc/grafana/provisioning
      - ./logging/grafana-logs/dashboards:/var/lib/grafana/dashboards
    networks:
      - db_net
    depends_on:
      - loki
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  db_net:
    driver: bridge
